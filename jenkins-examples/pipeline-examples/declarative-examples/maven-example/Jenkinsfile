import jenkins.model.Jenkins
import com.michelin.cio.hudson.plugins.rolestrategy.RoleBasedAuthorizationStrategy

def userId

@NonCPS
def myfun() {
                    
                        
                    def authorization = Jenkins.getInstance().getAuthorizationStrategy()
                    def grantedRoles = authorization.getGrantedRoles(RoleBasedAuthorizationStrategy.GLOBAL)
                    echo "userId $userId"

                    for (def grantedRole : grantedRoles.entrySet()) {
                      echo "grantedRole ${grantedRole.getValue()}"
                      
                      if (grantedRole.getValue().contains(userId)) {
                            echo grantedRole.getKey().getName()
                      }
                    }
}

pipeline {
    agent any
    stages {
        stage ('Clone') {
            steps {
                //git branch: 'master', url: "https://github.com/jfrog/project-examples.git"
                
                wrap([$class: 'BuildUser']) {
                      userId = BUILD_USER_ID
                }
              
                script {
                  echo "antes"
                  myfun()
                  echo "despues"
                }
            }
        }

/*        stage ('Artifactory configuration') {
            steps {
                rtServer (
                    id: "ARTIFACTORY_SERVER",
                    url: SERVER_URL,
                    credentialsId: CREDENTIALS
                )

                rtMavenDeployer (
                    id: "MAVEN_DEPLOYER",
                    serverId: "ARTIFACTORY_SERVER",
                    releaseRepo: "libs-release-local",
                    snapshotRepo: "libs-snapshot-local"
                )

                rtMavenResolver (
                    id: "MAVEN_RESOLVER",
                    serverId: "ARTIFACTORY_SERVER",
                    releaseRepo: "libs-release",
                    snapshotRepo: "libs-snapshot"
                )
            }
        }

        stage ('Exec Maven') {
            steps {
                rtMavenRun (
                    tool: MAVEN_TOOL, // Tool name from Jenkins configuration
                    pom: 'maven-example/pom.xml',
                    goals: 'clean install',
                    deployerId: "MAVEN_DEPLOYER",
                    resolverId: "MAVEN_RESOLVER"
                )
            }
        }

        stage ('Publish build info') {
            steps {
                rtPublishBuildInfo (
                    serverId: "ARTIFACTORY_SERVER"
                )
            }
        }*/
    }
}
